/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package notification;

import Database.Database;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static main.Dis.stmt1;
import main.loading;
//import static notification.notify.jnum;

/**
 *
 * @author ganes
 */
public class NotifyTable extends javax.swing.JFrame {

    /**
     * Creates new form NotifyTable
     */
    public NotifyTable() {
        initComponents();
        //update();
        notification();
        pop();
        tupdate();
        
    }
    public void tupdate(){
    try
        {
            PreparedStatement pst1 = connection.prepareStatement("SELECT asset_tag,vendor,purchase_date,warranty_date,duration FROM inventory WHERE duration <= 30 and duration > 0 and claimed IS NULL;");
            stmt1 = connection.createStatement();
            ResultSet rs1=pst1.executeQuery();
            
            
            DefaultTableModel model=(DefaultTableModel) NoteTable.getModel();
            model.setRowCount(0);
            while(rs1.next())
            {
              model.addRow(new String[]{rs1.getString(1),rs1.getString(2),rs1.getString(3),rs1.getString(4),rs1.getString(5)});
            }
            
        } catch(Exception e)
        {System.out.println(e);}
}
    public static int jnum= 0;
 
    Database db = loading.db;
    Connection connection = db.connection;
    Statement stmt;
    public static Statement stmt1; 
    private String asset_tag;
    private java.sql.Date warranty_date;
    private java.sql.Date purchase_date;
    public void notification()  {
    
    try {
       
            int num1 = 0;
            PreparedStatement pst1=connection.prepareStatement("Select COUNT(*) FROM inventory where purchase_date is NOT NULL");
            ResultSet rs1 = pst1.executeQuery();
               while(rs1.next()){
               num1 = rs1.getInt(1);
               }
               SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
               Date curdate = new Date();
               String cdate = fmt.format(curdate);
               PreparedStatement pst2 = connection.prepareStatement("Select asset_tag,purchase_date, warranty_date FROM inventory where purchase_date is NOT NULL");
               ResultSet rs2 = pst2.executeQuery(); 
               while(rs2.next()){
                   asset_tag = rs2.getString("asset_tag");
                   warranty_date = rs2.getDate("warranty_date");
                   purchase_date = rs2.getDate("purchase_date");
                   String wdate = fmt.format(warranty_date);
                   String Pdate = fmt.format(purchase_date);
                   final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                   final LocalDate firstDate = LocalDate.parse(Pdate, formatter);
                   final LocalDate secondDate = LocalDate.parse(wdate, formatter);
                   final long days = ChronoUnit.DAYS.between(firstDate, secondDate);
                     jnum=(int)days;

                   for(int i=0;i<num1;i++)
                   {
                       PreparedStatement pst3=connection.prepareStatement("UPDATE inventory SET duration=? WHERE asset_tag=?");
                        pst3.setInt(1,jnum);
                        pst3.setString(2, asset_tag);
                        pst3.executeQuery();
                       
                    }
                         }
               } catch(SQLException e) {}
        }
public void pop()
{
    try {
        int a =31;
        int num2=0;
        stmt = connection.createStatement();
        PreparedStatement pst4 = connection.prepareStatement("Select duration FROM inventory where duration <= ?");
        pst4.setInt(1, a);
        ResultSet rs2 = pst4.executeQuery();
        if(rs2.next()){
              num2 = rs2.getInt(1);            
               }
    } catch (SQLException ex) {
        System.out.println(ex);
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        NoteTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(9, 113, 206));
        setUndecorated(true);

        NoteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Asset Tag", "Vendor", "Invoice Date", "Warranty Date", "Days left to expire"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        NoteTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(NoteTable);
        if (NoteTable.getColumnModel().getColumnCount() > 0) {
            NoteTable.getColumnModel().getColumn(0).setResizable(false);
            NoteTable.getColumnModel().getColumn(1).setResizable(false);
            NoteTable.getColumnModel().getColumn(2).setResizable(false);
            NoteTable.getColumnModel().getColumn(3).setResizable(false);
            NoteTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Claimed");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(334, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
                    DefaultTableModel RecordTable=(DefaultTableModel) NoteTable.getModel();
        String AssetTag=RecordTable.getValueAt(NoteTable.getSelectedRow(),0).toString();
        PreparedStatement stmt = connection.prepareStatement("Update inventory set claimed='yes' where asset_tag = ? ");
        stmt.setString(1, AssetTag);
        stmt.executeUpdate();
        
        JOptionPane.showMessageDialog(null, "Claimed");
        tupdate();
        
        
        }
        catch(Exception e)
                {
                    System.out.println(e);
                }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotifyTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotifyTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotifyTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotifyTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotifyTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable NoteTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
